// ReportService.cs
public class ReportService : IReportService
{
    // ‚≠ê –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–ù–¢–ï–†–§–ï–ô–°–´ ‚≠ê
    private readonly IProjectService _projects;
    private readonly IDefectService _defects;
    private readonly IUserService _users; // –í–Ω–µ–¥—Ä—è–µ–º UserService

    // –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public ReportService(
        IDefectService defects, 
        IProjectService projects, 
        IUserService users) // üëà –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ DI
    {
        _defects = defects;
        _projects = projects;
        _users = users;
    }

    public async Task<IEnumerable<object>> GetProjectReportAsync()
    {
        var projects = await _projects.GetAllAsync();
        return projects.Select(p => new
        {
            p.Id,
            p.Name,
            TotalStages = p.Stages.Count,
            Completed = p.Stages.Count(s => s.Status == "Done"),
            InProgress = p.Stages.Count(s => s.Status == "InProgress"),
            // –°—Ç–∞—Ç—É—Å "Planned" –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "New" –∏–ª–∏ "Todo", 
            // –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å
            Planned = p.Stages.Count(s => s.Status == "Planned") 
        });
    }

    public async Task<IEnumerable<object>> GetDefectReportAsync()
    {
        var defects = await _defects.GetAllAsync();
        return defects.GroupBy(d => d.Status).Select(g => new { Status = g.Key, Count = g.Count() });
    }
    
    // ‚≠ê –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç—á–µ—Ç –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º, —Å–≤—è–∑—ã–≤–∞—é—â–∏–π Defect –∏ User
    public async Task<IEnumerable<object>> GetAssigneeReportAsync()
    {
        var defects = await _defects.GetAllAsync();
        var users = await _users.GetAsync();

        // 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ñ–µ–∫—Ç—ã –ø–æ AssignedToId
        var defectGroups = defects.Where(d => d.AssignedToId != null)
                                  .GroupBy(d => d.AssignedToId!)
                                  .Select(g => new 
                                  { 
                                      UserId = g.Key, 
                                      DefectCount = g.Count() 
                                  });

        // 2. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Username/Role
        return defectGroups.Join(
            users,
            d => d.UserId,
            u => u.Id,
            (d, u) => new 
            {
                u.Username,
                u.Role,
                d.DefectCount
            });
    }

    public async Task<object> GetSummaryAsync()
    {
        var projects = await _projects.GetAllAsync();
        var defects = await _defects.GetAllAsync();

        return new
        {
            TotalProjects = projects.Count,
            TotalDefects = defects.Count,
            DefectsByStatus = defects.GroupBy(d => d.Status).Select(g => new { Status = g.Key, Count = g.Count() }),
            ProjectsProgress = projects.Select(p => new
            {
                p.Id,
                p.Name,
                CompletedStages = p.Stages.Count(s => s.Status == "Done"),
                TotalStages = p.Stages.Count
            })
        };
    }

    public async Task<byte[]> ExportDefectsCsvAsync()
    {
        var defects = await _defects.GetAllAsync();
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("Id,Title,Status,Priority,ProjectId,AssignedToId,CreatedAt,DueDate");
        foreach (var d in defects)
        {
            string escape(string? s) => string.IsNullOrEmpty(s) ? "" : $"\"{s.Replace("\"", "\"\"")}\"";
            sb.AppendLine($"{d.Id},{escape(d.Title)},{escape(d.Status)},{escape(d.Priority)},{d.ProjectId},{d.AssignedToId},{d.CreatedAt:o},{d.DueDate:o}");
        }
        return System.Text.Encoding.UTF8.GetBytes(sb.ToString());
    }
        public async Task<object> GetSummaryReportAsync()
    {
       
        
        var projects = await _projects.GetAllAsync();
        var defects = await _defects.GetAllAsync();

        var summary = new
        {
            TotalProjects = projects.Count(),
            TotalDefects = defects.Count(),
            DefectsByStatus = defects.GroupBy(d => d.Status).Select(g => new { Status = g.Key, Count = g.Count() }),
            ProjectsProgress = projects.Select(p => new
            {
                p.Name,
                CompletedStages = p.Stages.Count(s => s.Status == "Done"),
                TotalStages = p.Stages.Count
            })
        };

        return summary;
    }
}