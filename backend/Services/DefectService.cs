using MongoDB.Driver;
using MongoDB.Bson;
public class DefectService : IDefectService 
{
    private readonly IMongoCollection<Defect> _defects;
    
    
    private readonly IUserService _userService;
    private readonly IProjectService _projectService; 

    
    public DefectService(
        IMongoDatabase database, 
        IUserService userService, 
        IProjectService projectService) 
    {
        _defects = database.GetCollection<Defect>("Defects");
        _userService = userService;
        _projectService = projectService;
    }

    public async Task<List<Defect>> GetAllAsync() =>
        await _defects.Find(_ => true).ToListAsync();

    public async Task<Defect?> GetByIdAsync(string id) => // üëà –í–û–¢ –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–ï–¢
        await _defects.Find(d => d.Id == id).FirstOrDefaultAsync();

    public async Task<Defect> CreateAsync(Defect d) // üëà –í–û–¢ –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–ï–¢
    {
        await _defects.InsertOneAsync(d);
        return d;
    }

    public async Task<bool> UpdateAsync(string id, Defect updated) // üëà –í–û–¢ –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–ï–¢
    {
        var result = await _defects.ReplaceOneAsync(d => d.Id == id, updated);
        return result.ModifiedCount > 0;
    }

    public async Task<bool> DeleteAsync(string id) // üëà –í–û–¢ –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–ï–¢
    {
        var result = await _defects.DeleteOneAsync(d => d.Id == id);
        return result.DeletedCount > 0;
    }

    public async Task<DefectDetailDto?> GetDefectDetailsAsync(string id)
{
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π –æ–±—ä–µ–∫—Ç Defect
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç GetByIdAsync
    var defect = await _defects.Find(d => d.Id == id).FirstOrDefaultAsync(); 
    
    if (defect == null) return null;

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DTO –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
    ProjectSummaryDto? projectDto = null;
    UserSummaryDto? userDto = null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º UserSummaryDto –≤–º–µ—Å—Ç–æ AssignedToUserDto

    // 3. ‚≠ê –ü–†–û–í–ï–†–ö–ê –∏ –û–ë–û–ì–ê–©–ï–ù–ò–ï –î–õ–Ø –ü–†–û–ï–ö–¢–ê ‚≠ê
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º MongoDB ObjectId
    if (!string.IsNullOrEmpty(defect.ProjectId) && ObjectId.TryParse(defect.ProjectId, out _))
    {
        projectDto = await _projectService.GetProjectSummaryByIdAsync(defect.ProjectId);
    }
    
    // 4. ‚≠ê –ü–†–û–í–ï–†–ö–ê –∏ –û–ë–û–ì–ê–©–ï–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ‚≠ê
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º MongoDB ObjectId
    if (!string.IsNullOrEmpty(defect.AssignedToId) && ObjectId.TryParse(defect.AssignedToId, out _))
    {
        userDto = await _userService.GetUserSummaryByIdAsync(defect.AssignedToId);
    }
    
    // 5. –ú–∞–ø–ø–∏–Ω–≥ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π DTO
    return new DefectDetailDto
    {
        Id = defect.Id,
        Title = defect.Title,
        Description = defect.Description,
        Status = defect.Status, // –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è!
        Priority = defect.Priority, 
        CreatedAt = defect.CreatedAt,
        DueDate = defect.DueDate,
        
        Project = projectDto,
        AssignedTo = userDto
    };
}

    public async Task<IEnumerable<DefectSummaryDto>> GetDefectListAsync()
{
    var defects = await _defects.Find(_ => true).ToListAsync();
    
    // ‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ ID (null –∏–ª–∏ –Ω–µ 24-–∑–Ω–∞—á–Ω—ã–π hex) ‚≠ê
    
    // 1. –°–æ–±–∏—Ä–∞–µ–º Project IDs
    var projectIds = defects.Select(d => d.ProjectId)
                            .Where(id => id != null && ObjectId.TryParse(id, out _)) // <-- –ó–∞—â–∏—Ç–∞
                            .Distinct().ToList();
                            
    // 2. –°–æ–±–∏—Ä–∞–µ–º User IDs
    var userIds = defects.Select(d => d.AssignedToId)
                         .Where(id => id != null && ObjectId.TryParse(id, out _)) // <-- –ó–∞—â–∏—Ç–∞
                         .Distinct().ToList();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Summary-DTO –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö ID
    var projects = (await _projectService.GetProjectsSummaryByIdsAsync(projectIds))
                    .ToDictionary(p => p.Id, p => p);
    var users = (await _userService.GetUsersSummaryByIdsAsync(userIds))
                 .ToDictionary(u => u.Id, u => u);

    // –ú–∞–ø–ø–∏–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º
    return defects.Select(d => new DefectSummaryDto
    {
        Id = d.Id!,
        Title = d.Title,
        Status = d.Status,
        Priority = d.Priority,
        // –û–±–æ–≥–∞—â–µ–Ω–∏–µ: –µ—Å–ª–∏ ID –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, GetValueOrDefault –≤–µ—Ä–Ω—ë—Ç null, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç || '–ù/–î' –≤–æ Vue
        Project = d.ProjectId != null ? projects.GetValueOrDefault(d.ProjectId!) : null,
        AssignedTo = d.AssignedToId != null ? users.GetValueOrDefault(d.AssignedToId!) : null
    }).ToList();
}
}